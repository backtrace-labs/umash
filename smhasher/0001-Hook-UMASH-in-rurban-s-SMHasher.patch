From 273ebf517e650f93eb46b9e000a9e7ac6a47c980 Mon Sep 17 00:00:00 2001
From: Paul Khuong <pkhuong@backtrace.io>
Date: Wed, 26 Aug 2020 23:10:25 +0000
Subject: [PATCH] Hook UMASH in rurban's SMHasher

---
 CMakeLists.txt |  5 +++--
 Hashes.h       |  2 ++
 main.cpp       |  5 ++++-
 umash.hpp      | 54 ++++++++++++++++++++++++++++++++++++++++++++++++++
 4 files changed, 63 insertions(+), 3 deletions(-)
 create mode 100644 umash.hpp

diff --git a/CMakeLists.txt b/CMakeLists.txt
index c7e1388..1b1cd10 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -203,8 +203,8 @@ if (CMAKE_COMPILER_IS_GNUCC
   #  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -msha")
   #ENDIF (SHA_TRUE)
   if (NOT (CMAKE_CROSSCOMPILING))
-    set(CMAKE_C_FLAGS   "${CMAKE_C_FLAGS} -march=native")
-    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -march=native")
+    set(CMAKE_C_FLAGS   "${CMAKE_C_FLAGS} -march=native -mtune=native")
+    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -march=native -mtune=native")
   endif()
 elseif (MSVC)
   # using Visual Studio C++, already the default with VS17
@@ -486,6 +486,7 @@ add_library(SMHasherSupport STATIC
   vmac.cpp
   rijndael-alg-fst.c
   ${BLAKE3_SRC}
+  umash.c
 )
 
 add_executable(
diff --git a/Hashes.h b/Hashes.h
index f33c62e..bec5ecf 100644
--- a/Hashes.h
+++ b/Hashes.h
@@ -32,6 +32,8 @@
 
 #include "vmac.h"
 
+#include "umash.hpp"
+
 //----------
 // These are _not_ hash functions (even though people tend to use crc32 as one...)
 
diff --git a/main.cpp b/main.cpp
index 0ff93d2..365119b 100644
--- a/main.cpp
+++ b/main.cpp
@@ -387,7 +387,10 @@ HashInfo g_hashes[] =
 #ifdef HAVE_INT64
   { wyhash_test,           64, 0x8323EB7E, "wyhash",         "wyhash (64-bit)", GOOD },
 #endif
-
+  { umash128,             128, 0x1ED02AAA, "umash128", "umash 128", GOOD },
+  { umash,                 64, 0x7518A050, "umash64", "umash 64", GOOD },
+  { umash32,               32, 0x2F0C2CC6, "umash32", "umash 32", GOOD },
+  { umash32_hi,            32, 0xD323A67D, "umash32_hi", "umash 32 hi", GOOD },
 };
 
 HashInfo * findHash ( const char * name )
diff --git a/umash.hpp b/umash.hpp
new file mode 100644
index 0000000..e9bfb35
--- /dev/null
+++ b/umash.hpp
@@ -0,0 +1,54 @@
+#pragma once
+
+#include "umash.h"
+
+namespace {
+struct umash_params
+make_umash_params()
+{
+	struct umash_params ret;
+
+	umash_params_derive(&ret, 0, nullptr);
+	return ret;
+}
+
+void umash(const void *blob, int len, uint32_t seed, void *out)
+{
+	static const struct umash_params default_params = make_umash_params();
+	uint64_t hash;
+
+	hash = umash_full(&default_params, seed, 0, blob, len);
+	memcpy(out, &hash, sizeof(hash));
+	return;
+}
+
+void umash32(const void *blob, int len, uint32_t seed, void *out)
+{
+	static const struct umash_params default_params = make_umash_params();
+	uint32_t hash;
+
+	hash = umash_full(&default_params, seed, 0, blob, len);
+	memcpy(out, &hash, sizeof(hash));
+	return;
+}
+
+void umash32_hi(const void *blob, int len, uint32_t seed, void *out)
+{
+	static const struct umash_params default_params = make_umash_params();
+	uint32_t hash;
+
+	hash = umash_full(&default_params, seed, 0, blob, len) >> 32;
+	memcpy(out, &hash, sizeof(hash));
+	return;
+}
+
+void umash128(const void *blob, int len, uint32_t seed, void *out)
+{
+	static const struct umash_params default_params = make_umash_params();
+	struct umash_fp hash;
+
+	hash = umash_fprint(&default_params, seed, blob, len);
+	memcpy(out, &hash, sizeof(hash));
+	return;
+}
+}  // namespace
-- 
2.17.1

